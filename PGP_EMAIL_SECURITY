from cryptography.hazmat.primitives.asymmetric import rsa, padding  # type: ignore
from cryptography.hazmat.primitives import hashes, serialization  # type: ignore
import base64

# Key Generation(Public and Private Key)
def generate_keys():
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    public_key = private_key.public_key()
    return private_key, public_key

# Encrypt Message using Public Key
def encrypt_message(message: str, public_key):
    ciphertext = public_key.encrypt(
        message.encode(),
        padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
    )
    return base64.b64encode(ciphertext).decode()

# Decrypt Message using Private Key
def decrypt_message(ciphertext_b64: str, private_key):
    ciphertext = base64.b64decode(ciphertext_b64)
    plaintext = private_key.decrypt(
        ciphertext,
        padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
    )
    return plaintext.decode()

# Sign Message with Private Key
def sign_message(message: str, private_key):
    signature = private_key.sign(
        message.encode(),
        padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH),
        hashes.SHA256()
    )
    return base64.b64encode(signature).decode()

# Verify Signature with Public Key
def verify_signature(message: str, signature_b64: str, public_key):
    signature = base64.b64decode(signature_b64)
    try:
        public_key.verify(
            signature,
            message.encode(),
            padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH),
            hashes.SHA256()
        )
        return True
    except:
        return False

# Demo
private_key, public_key = generate_keys()
message = input("enter messge :")

cipher = encrypt_message(message, public_key)
print("Encrypted:", cipher)

plain = decrypt_message(cipher, private_key)
print("Decrypted:", plain)

signature = sign_message(message, private_key)
print("Signature:", signature)

is_valid = verify_signature(message, signature, public_key)
print("Signature valid?", is_valid)
